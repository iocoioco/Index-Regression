using System;
using System.Collections.Concurrent;

public class StockManager
{
    private static StockManager instance;
    public static StockManager Instance => instance ??= new StockManager();

    public ConcurrentDictionary<string, StockData> StockDatabase = new ConcurrentDictionary<string, StockData>();

    private StockManager() { } // Private constructor prevents multiple instances

    public void AddOrUpdateStock(StockData newStockData)
    {
        StockDatabase.AddOrUpdate(newStockData.Code, newStockData, (key, existingStock) =>
        {
            existingStock.UpdateStock(newStockData);
            return existingStock;
        });
    }

    public StockData GetStock(string code)
    {
        StockDatabase.TryGetValue(code, out StockData stock);
        return stock;
    }
}


using System.Threading.Tasks;

public class StockDownloader
{
    private _marketeye marketeye = new _marketeye(); // Assume this is your API instance

    public async Task StartDownloading()
    {
        while (true)
        {
            await Task.Delay(300); // Run every 0.3 sec

            for (int k = 0; k < 200; k++)
            {
                string code = marketeye.GetDataValue(0, k);
                if (string.IsNullOrEmpty(code))
                    continue;

                StockData stockData = new StockData(code)
                {
                    CurrentPrice = marketeye.GetDataValue(4, k),
                    OpeningPrice = marketeye.GetDataValue(5, k),
                    HighPrice = marketeye.GetDataValue(6, k),
                    LowPrice = marketeye.GetDataValue(7, k),
                    Volume = marketeye.GetDataValue(10, k),
                    BuyPrice1 = marketeye.GetDataValue(8, k),
                    SellPrice1 = marketeye.GetDataValue(9, k),
                };

                StockManager.Instance.AddOrUpdateStock(stockData);
            }
        }
    }
}


using System;
using System.Linq;
using System.Threading.Tasks;

public class RankingProcessor
{
    public async Task StartRanking()
    {
        while (true)
        {
            await Task.Delay(5000); // Run every 5 sec

            var rankedStocks = StockManager.Instance.StockDatabase.Values
                .OrderByDescending(s => s.Volume * s.CurrentPrice)
                .Take(10)
                .ToList();

            Console.WriteLine("\n[Ranking] Top 10 Stocks:");
            foreach (var stock in rankedStocks)
            {
                Console.WriteLine($"  {stock.Code} - Score: {stock.Volume * stock.CurrentPrice}");
            }
        }
    }
}
