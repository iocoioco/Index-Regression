public event Action OnLargeBuyDetected; // 🔥 New Event for Alerts

public void CheckForLargeBuys()
{
    foreach (var stock in StockDatabase.Values)
    {
        if (stock.ProgramBuy > 100000 || stock.ForeignBuy > 50000) // 🔥 Threshold for alert
        {
            Console.WriteLine($"🚨 ALERT: {stock.Code} Large Buy Detected! Program Buy: {stock.ProgramBuy}, Foreign Buy: {stock.ForeignBuy}");
            OnLargeBuyDetected?.Invoke(); // 🔥 Trigger Alert Event
            return; // Prevent multiple alerts at once
        }
    }
}

public class ChartUpdater
{
    public ChartUpdater()
    {
        StockManager.Instance.OnRankingUpdated += () => Task.Run(() => StartCharting());
        StockManager.Instance.OnLargeBuyDetected += () => Task.Run(() => AlertLargeBuy());
    }

    public async Task StartCharting()
    {
        Console.WriteLine("[Chart] Updating stock charts...");
        foreach (var stock in StockManager.Instance.RankedStocks)
        {
            Console.WriteLine($"[Chart] {stock.Code} - Score: {stock.Volume * stock.CurrentPrice}");
        }
        await Task.Delay(1000);
    }

    public void AlertLargeBuy()
    {
        Console.WriteLine("🚨 [Chart] Highlighting stock with a large buy!");
        Console.Beep(); // 🔥 Sound Alert
        FlashScreen();  // 🔥 Color Change
    }

    private void FlashScreen()
    {
        Console.BackgroundColor = ConsoleColor.Red;
        Console.Clear();
        Task.Delay(300).Wait(); // Flash effect
        Console.ResetColor();
    }
}


public class RankingProcessor
{
    public async Task StartRanking()
    {
        while (true)
        {
            await Task.Delay(5000);
            StockManager.Instance.UpdateRanking();
            StockManager.Instance.CheckForLargeBuys(); // 🔥 Also check for large buys
        }
    }
}


public class StockData
{
    public string Code { get; set; }
    public double CurrentPrice { get; set; }
    public int Volume { get; set; }
    public int ProgramBuy { get; set; }  // 🔥 New Field
    public int ForeignBuy { get; set; }  // 🔥 New Field

    public void UpdateStock(StockData newData)
    {
        CurrentPrice = newData.CurrentPrice;
        Volume = newData.Volume;
        ProgramBuy = newData.ProgramBuy;
        ForeignBuy = newData.ForeignBuy;
    }
}


public class StockDownloader
{
    private Random random = new Random();

    public async Task StartDownloading()
    {
        while (true)
        {
            Console.WriteLine("[Downloader] Fetching stock data...");
            
            // Simulate random stock updates
            string code = "Stock" + random.Next(1, 10);
            var stock = new StockData
            {
                Code = code,
                CurrentPrice = random.NextDouble() * 100,
                Volume = random.Next(1000, 5000),
                ProgramBuy = random.Next(50000),  // 🔥 Simulate program buy
                ForeignBuy = random.Next(50000)   // 🔥 Simulate foreign buy
            };

            StockManager.Instance.AddOrUpdateStock(stock);
            await Task.Delay(300);
        }
    }
}


1. Stock Download	Every 0.3 sec	StockDownloader updates stock data
2. Large Buy Check	Every 5 sec	StockManager.CheckForLargeBuys() scans for large buy orders
3. Alert Event	OnLargeBuyDetected?.Invoke();	Triggers alert in ChartUpdater
4. Sound + Chart Flash	AlertLargeBuy()	Beep sound + Red

✔ Detects sudden large buys (program/foreign investors)
✔ Triggers automatic chart updates, sound alerts, and flashing colors
✔ Runs asynchronously with Task.WhenAll()
✔ Event-driven design ensures efficiency
Now you will never miss a big program or foreign buy! 🚀
Would you like to add automatic order execution for large buys next? 😊